{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to MkDocs","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"architecture/","title":"Architecture Overview","text":""},{"location":"architecture/#modules","title":"Modules","text":""},{"location":"architecture/#1-turing_machinepy","title":"1. <code>turing_machine.py</code>","text":"<p>Defines the <code>TuringMachine</code> class, encapsulating the behavior of a Turing machine. It manages the tape, head position, current state, and execution steps.</p>"},{"location":"architecture/#2-simulationpy","title":"2. <code>simulation.py</code>","text":"<p>Handles the enumeration and simulation of all possible Turing machines based on defined states and symbols. Utilizes multiprocessing to parallelize simulations for efficiency.</p>"},{"location":"architecture/#3-utilspy","title":"3. <code>utils.py</code>","text":"<p>Contains utility functions and shared constants to support other modules.</p>"},{"location":"architecture/#workflow","title":"Workflow","text":"<ol> <li> <p>Enumeration: Generates all possible transition functions based on the number of states and symbols.</p> </li> <li> <p>Simulation: Each transition function is simulated using the <code>TuringMachine</code> class to determine if it halts and its productivity.</p> </li> <li> <p>Aggregation: Collects results to identify the most productive and longest-running halting machines.</p> </li> </ol>"},{"location":"architecture/#future-enhancements","title":"Future Enhancements","text":"<ul> <li> <p>Configurable Parameters: Allow dynamic configuration of states, symbols, and other parameters via configuration files or command-line arguments.</p> </li> <li> <p>Optimization: Implement more efficient algorithms or heuristics to reduce the simulation space.</p> </li> <li> <p>Visualization: Add visualization tools to represent machine behavior and tape states.</p> </li> <li> <p>Extended Testing: Increase test coverage for more robust validation.</p> </li> </ul>"}]}